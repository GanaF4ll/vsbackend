openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for managing users

tags:
  - name: Users
    description: User management operations

paths:
  /users/all:
    get:
      tags:
        - Users
      summary: List all users
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      tags:
        - Users
      summary: Update user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/name/{name}:
    get:
      tags:
        - Users
      summary: Get users by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: No users found

  /users/mail/{mail}:
    get:
      tags:
        - Users
      summary: Get user by email
      parameters:
        - in: path
          name: mail
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

  /users/signup:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Invalid credentials
        "404":
          description: User not found

  /users/pro/{id}:
    put:
      tags:
        - Users
      summary: Upgrade user to SENTINEL
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User upgraded to SENTINEL
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  updatedUser:
                    $ref: "#/components/schemas/User"

  /users/admin/{id}:
    put:
      tags:
        - Users
      summary: Admin update user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request
    delete:
      tags:
        - Users
      summary: Admin delete user
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        birthdate:
          type: string
          format: date
        mail:
          type: string
        role_id:
          type: integer
        gender:
          type: string

    NewUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        mail:
          type: string
        password:
          type: string
        role_id:
          type: integer
        gender:
          type: string
        birthdate:
          type: string
          format: date

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        mail:
          type: string
        password:
          type: string
        role_id:
          type: integer
        gender:
          type: string
        birthdate:
          type: string
          format: date

    Login:
      type: object
      properties:
        mail:
          type: string
        password:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
