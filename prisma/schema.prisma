generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Answers {
  id          Int      @id @default(autoincrement())
  question_id Int
  question    Questions @relation(fields: [question_id], references: [id])
  content     String   @db.Text
  valid       Boolean
}

model Articles {
  id          Int      @id @default(autoincrement())
  author_id   Int
  author      Users     @relation("ArticleAuthor", fields: [author_id], references: [id])
  title       String   @db.Text
  content     String   @db.Text
  category_id Int
  category    Categories @relation(fields: [category_id], references: [id])
  coverImage  String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @default(now())
}

model Categories {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  formations Formations[]
  articles  Articles[]
}

model Chapters {
  id             Int        @id @default(autoincrement())
  formation_id   Int
  formation      Formations  @relation(fields: [formation_id], references: [id])
  title          String     @db.VarChar(50)
  content        String     @db.Text
  chapter_number Int
  progression    Progressions[]
  questions      Questions[]
}

model Formations {
  id             Int         @id @default(autoincrement())
  author_id      Int
  author         Users        @relation("FormationAuthor", fields: [author_id], references: [id])
  title          String      @db.VarChar(50)
  description    String      @db.Text
  video          String      @db.VarChar(50)
  category_id    Int
  category       Categories    @relation(fields: [category_id], references: [id])
  difficulty     String      @db.VarChar(10)
  completionTime DateTime    @db.Date
  qualityRating  Int
  coverImage     String      @db.VarChar(50)
  chapters       Chapters[]
  ratings        Ratings[]
  createdAt      DateTime    @default(now())
  modifiedAt     DateTime    @default(now())
}

model Progressions {
  user_id     Int     @id
  user        Users    @relation(fields: [user_id], references: [id])
  progression Int
  grade       Int
  chapter_id  Int
  chapter     Chapters @relation(fields: [chapter_id], references: [id])
}

model Questions {
  id         Int      @id @default(autoincrement())
  content   String   @db.Text
  chapter_id Int
  chapter    Chapters  @relation(fields: [chapter_id], references: [id])
  answers    Answers[]
}

model Ratings {
  id           Int        @id @default(autoincrement())
  formation_id Int
  formation    Formations  @relation(fields: [formation_id], references: [id])
  grade        Int
}

model Roles {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  users Users[]
}

model Users {
  id         Int        @id @default(autoincrement())
  firstName  String     @db.VarChar(50)
  lastName   String     @db.VarChar(50)
  birthdate  DateTime   @db.Date
  mail       String     @db.VarChar(50)
  password   String     @db.VarChar(500)
  role_id    Int        @default(2)
  gender     String     @db.VarChar(10)
  role       Roles       @relation(fields: [role_id], references: [id])
  articles   Articles[]  @relation("ArticleAuthor")
  formations Formations[] @relation("FormationAuthor")
  progressions Progressions[]
  createdAt  DateTime   @default(now())
  modifiedAt DateTime?  @default(now())
}
